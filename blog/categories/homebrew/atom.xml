<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Homebrew | John Firebaugh]]></title>
  <link href="http://jfirebaugh.github.com/blog/categories/homebrew/atom.xml" rel="self"/>
  <link href="http://jfirebaugh.github.com/"/>
  <updated>2013-04-08T23:47:38-04:00</updated>
  <id>http://jfirebaugh.github.com/</id>
  <author>
    <name><![CDATA[John Firebaugh]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Xcode 4.3, homebrew, and Ruby]]></title>
    <link href="http://jfirebaugh.github.com/blog/2012/03/02/xcode-4-dot-3-homebrew-and-ruby/"/>
    <updated>2012-03-02T00:00:00-05:00</updated>
    <id>http://jfirebaugh.github.com/blog/2012/03/02/xcode-4-dot-3-homebrew-and-ruby</id>
    <content type="html"><![CDATA[<p>Ruby on Mac OS Lion is going through a bit of a rough patch,
installation-wise. With Xcode 4.2, clang became the default compiler and gcc
was no longer included. Unfortunately, this has caused a lot of grief for
Rubyists on OS X, because for a while, MRI did not officially support
compiling with clang. With the release of 1.9.3-p125,
that situation has changed--clang is now officially supported--but
there are still some gotchas. This post details my toolchain and process for
running MRI 1.9.3 and 1.8.7 on Lion with Xcode 4.3.</p>

<p>If you want a TL;DR: install the Xcode 4.3 command line tools. Then,</p>

<p><code>
$ brew update
$ brew install autoconf automake
$ brew install https://raw.github.com/Homebrew/homebrew-dupes/master/apple-gcc42.rb
$ rvm get head
$ rvm install 1.8.7
$ rvm install 1.9.3-head
</code></p>

<p>Read on for a detailed rationale.</p>

<h2>Xcode</h2>

<p>I use Xcode 4.3 and have installed the Xcode command line tools. I've
uninstalled all previous versions of Xcode. If you don't use Xcode itself,
save yourself a multi-gigabyte download and install just the command line
tools, which are now available
<a href="http://developer.apple.com/downloads">separately</a>. Thanks to Kenneth Reitz for
<a href="http://kennethreitz.com/xcode-gcc-and-homebrew.html">his work making this happen</a>.</p>

<h2>Homebrew</h2>

<p>Homebrew now has good support for Xcode 4.3. Just make sure to <code>brew update</code>.</p>

<p>In order to build MRI, you'll need to install some specific formulas. First
of all, autoconf and automake:</p>

<pre><code>$ brew install autoconf automake
</code></pre>

<p>You need these because Xcode 4.3 no longer includes autotools; if you have
installed Xcode 4.3 and uninstalled the previous versions,
you will no longer have <code>/usr/bin/autoconf</code>. You don't usually need the
autotools for installing homebrew formulas, since the downloaded packages
should come with <code>configure</code> pregenerated, but you do need them in order to
install head versions of MRI as described below.</p>

<p>Second, install gcc--the real version--from homebrew-dupes:</p>

<pre><code>$ brew install https://raw.github.com/Homebrew/homebrew-dupes/master/apple-gcc42.rb
</code></pre>

<p>The command line tools provide <code>/usr/bin/gcc</code>, but it's a modified version
based on LLVM and if you try to use it to compile 1.8.7,
you'll get the following crash when trying to install gems:</p>

<p><code>
$ gem install bundler
/Users/john/.rvm/rubies/ruby-1.8.7-p358/lib/ruby/1.8/timeout.rb:60: [BUG] Segmentation fault
ruby 1.8.7 (2012-02-08 patchlevel 358) [i686-darwin11.3.0]
</code></p>

<p>Kenneth Reitz's
<a href="https://github.com/kennethreitz/osx-gcc-installer">osx-gcc-installer</a> is another
popular way of getting GCC,
but you don't want to install it on top of the Xcode 4.3 command line tools,
because it will overwrite working versions of llvm-gcc and clang.
Homebrew-alt's apple-gcc42 formula gives you <em>just</em> Apple's GCC 4.2,
installed at <code>/usr/local/bin/gcc-4.2</code>.</p>

<h2>RVM</h2>

<p>Install RVM and run <code>rvm get head</code>. The latest RVM
<a href="https://github.com/wayneeseguin/rvm/issues/763">has the smarts</a> to use the
correct compilers to build both 1.9.3 and 1.8.7 -- clang for 1.9.3 and gcc-4.2
for 1.8.7. I tend to install both so I can test my gems on both versions.</p>

<pre><code>rvm install 1.9.3
rvm install 1.8.7
</code></pre>

<p>You shouldn't see any errors or warnings from these commands,
and you shouldn't need to specify <code>--with-gcc=clang</code> or <code>--with-gcc=gcc-4.2</code>.
If you see something like <code>Building 'ruby-1.8.7-p358' using clang - but it's
not (fully) supported, expect errors</code>, you've done something wrong. Go back
and make sure your command line tools are correctly installed and you've
installed the apple-gcc42 homebrew-alt formula.</p>

<p>You should now have working copies of 1.9.3 and 1.8.7. Hooray!</p>

<p>Still, you might run into one more problem. If you try to debug on 1.9.3,
you'll get this error:</p>

<p><code>``
/Users/john/.rvm/rubies/ruby-1.9.3-p125/lib/ruby/site_ruby/1.9.1/rubygems/custom_require.rb:36:
  in</code>require': dlopen(/Users/john/.rvm/gems/ruby-1.9.3-p125/gems/ruby-debug-base19-0.11.25/lib/ruby_debug.bundle, 9):
  Symbol not found: _ruby_current_thread (LoadError)
  Referenced from: /Users/john/.rvm/gems/ruby-1.9.3-p125/gems/ruby-debug-base19-0.11.25/lib/ruby_debug.bundle
  Expected in: flat namespace
 in /Users/john/.rvm/gems/ruby-1.9.3-p125/gems/ruby-debug-base19-0.11.25/lib/ruby_debug.bundle - /Users/john/.rvm/gems/ruby-1.9.3-p125/gems/ruby-debug-base19-0.11.25/lib/ruby_debug.bundle</p>

<pre><code>from /Users/john/.rvm/rubies/ruby-1.9.3-p125/lib/ruby/site_ruby/1.9.1/rubygems/custom_require.rb:36:in `require'
from /Users/john/.rvm/gems/ruby-1.9.3-p125/gems/ruby-debug-base19-0.11.25/lib/ruby-debug-base.rb:1:in `&lt;top (required)&gt;'
from /Users/john/.rvm/rubies/ruby-1.9.3-p125/lib/ruby/site_ruby/1.9.1/rubygems/custom_require.rb:36:in `require'
from /Users/john/.rvm/rubies/ruby-1.9.3-p125/lib/ruby/site_ruby/1.9.1/rubygems/custom_require.rb:36:in `require'
from /Users/john/.rvm/gems/ruby-1.9.3-p125/gems/ruby-debug19-0.11.6/cli/ruby-debug.rb:5:in `&lt;top (required)&gt;'
from /Users/john/.rvm/gems/ruby-1.9.3-p125/gems/ruby-debug19-0.11.6/bin/rdebug:108:in `require_relative'
from /Users/john/.rvm/gems/ruby-1.9.3-p125/gems/ruby-debug19-0.11.6/bin/rdebug:108:in `&lt;top (required)&gt;'
from /Users/john/.rvm/gems/ruby-1.9.3-p125/bin/rdebug:19:in `load'
from /Users/john/.rvm/gems/ruby-1.9.3-p125/bin/rdebug:19:in `&lt;main&gt;'
</code></pre>

<p>```</p>

<p>This is caused by a <a href="https://bugs.ruby-lang.org/issues/6080">clang incompatibility</a>
that didn't get fixed until after the 1.9.3-p125 release. Use the head
version of 1.9.3 instead: <code>rvm install 1.9.3-head</code>.</p>

<p>Phew! Now you're really bleeding edge.</p>
]]></content>
  </entry>
  
</feed>
